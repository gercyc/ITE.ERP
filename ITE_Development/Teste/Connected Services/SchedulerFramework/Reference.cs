//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Teste.SchedulerFramework {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SchedulerFramework.ISchedulerControl")]
    public interface ISchedulerControl {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchedulerControl/CreateTask", ReplyAction="http://tempuri.org/ISchedulerControl/CreateTaskResponse")]
        string CreateTask(ITSolution.Scheduler.EntidadesBd.TaskIts task, System.Threading.CancellationTokenSource cts);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchedulerControl/CreateTask", ReplyAction="http://tempuri.org/ISchedulerControl/CreateTaskResponse")]
        System.Threading.Tasks.Task<string> CreateTaskAsync(ITSolution.Scheduler.EntidadesBd.TaskIts task, System.Threading.CancellationTokenSource cts);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchedulerControl/StartTask", ReplyAction="http://tempuri.org/ISchedulerControl/StartTaskResponse")]
        void StartTask(string idTask, System.Threading.CancellationTokenSource cts);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchedulerControl/StartTask", ReplyAction="http://tempuri.org/ISchedulerControl/StartTaskResponse")]
        System.Threading.Tasks.Task StartTaskAsync(string idTask, System.Threading.CancellationTokenSource cts);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchedulerControl/DoWorkTask", ReplyAction="http://tempuri.org/ISchedulerControl/DoWorkTaskResponse")]
        void DoWorkTask(string idTask);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchedulerControl/DoWorkTask", ReplyAction="http://tempuri.org/ISchedulerControl/DoWorkTaskResponse")]
        System.Threading.Tasks.Task DoWorkTaskAsync(string idTask);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchedulerControl/SuspendTask", ReplyAction="http://tempuri.org/ISchedulerControl/SuspendTaskResponse")]
        void SuspendTask(string idTask);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchedulerControl/SuspendTask", ReplyAction="http://tempuri.org/ISchedulerControl/SuspendTaskResponse")]
        System.Threading.Tasks.Task SuspendTaskAsync(string idTask);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchedulerControl/InsertLogTask", ReplyAction="http://tempuri.org/ISchedulerControl/InsertLogTaskResponse")]
        void InsertLogTask(ITSolution.Scheduler.EntidadesBd.LogIts log);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchedulerControl/InsertLogTask", ReplyAction="http://tempuri.org/ISchedulerControl/InsertLogTaskResponse")]
        System.Threading.Tasks.Task InsertLogTaskAsync(ITSolution.Scheduler.EntidadesBd.LogIts log);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchedulerControl/Execute", ReplyAction="http://tempuri.org/ISchedulerControl/ExecuteResponse")]
        void Execute(ITSolution.Scheduler.EntidadesBd.TaskIts task, System.Threading.CancellationTokenSource cancellationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchedulerControl/Execute", ReplyAction="http://tempuri.org/ISchedulerControl/ExecuteResponse")]
        System.Threading.Tasks.Task ExecuteAsync(ITSolution.Scheduler.EntidadesBd.TaskIts task, System.Threading.CancellationTokenSource cancellationToken);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISchedulerControlChannel : SchedulerFramework.ISchedulerControl, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SchedulerControlClient : System.ServiceModel.ClientBase<SchedulerFramework.ISchedulerControl>, SchedulerFramework.ISchedulerControl {
        
        public SchedulerControlClient() {
        }
        
        public SchedulerControlClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SchedulerControlClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SchedulerControlClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SchedulerControlClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string CreateTask(ITSolution.Scheduler.EntidadesBd.TaskIts task, System.Threading.CancellationTokenSource cts) {
            return base.Channel.CreateTask(task, cts);
        }
        
        public System.Threading.Tasks.Task<string> CreateTaskAsync(ITSolution.Scheduler.EntidadesBd.TaskIts task, System.Threading.CancellationTokenSource cts) {
            return base.Channel.CreateTaskAsync(task, cts);
        }
        
        public void StartTask(string idTask, System.Threading.CancellationTokenSource cts) {
            base.Channel.StartTask(idTask, cts);
        }
        
        public System.Threading.Tasks.Task StartTaskAsync(string idTask, System.Threading.CancellationTokenSource cts) {
            return base.Channel.StartTaskAsync(idTask, cts);
        }
        
        public void DoWorkTask(string idTask) {
            base.Channel.DoWorkTask(idTask);
        }
        
        public System.Threading.Tasks.Task DoWorkTaskAsync(string idTask) {
            return base.Channel.DoWorkTaskAsync(idTask);
        }
        
        public void SuspendTask(string idTask) {
            base.Channel.SuspendTask(idTask);
        }
        
        public System.Threading.Tasks.Task SuspendTaskAsync(string idTask) {
            return base.Channel.SuspendTaskAsync(idTask);
        }
        
        public void InsertLogTask(ITSolution.Scheduler.EntidadesBd.LogIts log) {
            base.Channel.InsertLogTask(log);
        }
        
        public System.Threading.Tasks.Task InsertLogTaskAsync(ITSolution.Scheduler.EntidadesBd.LogIts log) {
            return base.Channel.InsertLogTaskAsync(log);
        }
        
        public void Execute(ITSolution.Scheduler.EntidadesBd.TaskIts task, System.Threading.CancellationTokenSource cancellationToken) {
            base.Channel.Execute(task, cancellationToken);
        }
        
        public System.Threading.Tasks.Task ExecuteAsync(ITSolution.Scheduler.EntidadesBd.TaskIts task, System.Threading.CancellationTokenSource cancellationToken) {
            return base.Channel.ExecuteAsync(task, cancellationToken);
        }
    }
}
